* General config
Note : edit a block wit C-c '
#+begin_src emacs-lisp
(setq user-full-name "Alexis Praga"
    user-mail-address "alexis.praga@free.fr"
    doom-theme 'doom-dark+)
#+end_src
* Hack
For WSL2, the bepo layout inputs "gé" as weird characters. Unsetting seems to do the trick.
Issue opened https://github.com/doomemacs/doomemacs/issues/6521
#+begin_src emacs-lisp
(setq evil-escape-key-sequence nil)
#+end_src
* Editor setup
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

* Org config
** General
TODO: org-template does not work with <e TAB but only with C-c ,

#+begin_src emacs-lisp
(setq org-directory "~/org/") ; Must be set before org loads
#+end_src
Other general config come later. Implementing GTD, following https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html
#+begin_src emacs-lisp
(after! org
  (setq org-agenda-files (list "inbox.org" "gtd.org") ; My agenda files
        org-refile-targets (list "gtd.org" "someday.org")
        org-agenda-start-day "today" ; Agenda view does not show notes with imcomplete parents in Doom !
        org-refile-allow-creating-parent-nodes 'confirm))
#+end_src

** Capture
Simpler templates. WARNING: property in templates makes doom crash
as it uses org-crypt. For now, org-crypt must be disabled in packages.el
See https://github.com/hlissner/doom-emacs/issues/6250
#+begin_src emacs-lisp
(after! org
  (setq org-capture-templates
        '(("t" "Personal todo" entry (file+headline "todo.org" "Inbox") "* TODO %?")
          ("s" "Sport")
          ("sr" "Running" entry (file "workout.org") "* %t Running\n%?" )
          ("st" "Tricking" entry (file "workout.org") "* %t Tricking\n%?")
          ("sw" "Workout" entry (file "workout.org") "* %t Workout\n%?
- RTO: %^{RTO}
L-sit: %^{L-sit}
Skin-the-cat (avec descente): %^{Skin-the-cat}
- Muscle-up %^{Muscle-up}
Extension: %^{Extension}
- FL tucked row : %^{FL tucked row}
Pistols : %^{Pistols}
- Planche tucked push-up: %^{Planche}
Compression: %^{Compression}"))))
#+end_src
** Latex
- Compilation: on freebsd latexmk is not found, so we force it
- Add a komascript class to export
- Manage bibliography with citar
For unnumbered section, we use the \addchap command to have an entry in TOC
#+begin_src emacs-lisp
(after! org
 (setq org-latex-pdf-process '("latexmk -f -pdf -%latex -interaction=nonstopmode -output-directory=%o %f"))
 (eval-after-load 'ox '(require 'ox-koma-letter)) ;; Export to latex with the scrreport class from komascript)
  (with-eval-after-load "ox-latex"
    (add-to-list 'org-latex-classes
               '("scrreprt" "\\documentclass{scrreprt}"
                 ("\\chapter{%s}" . "\\addchap{%s}")
                 ("\\section{%s}" . "\\addsec*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}"))))

  )
;; Bibliography with citar (vertico is the default completion engine)
(after! citar
  (setq! citar-bibliography '("~/org/recherche/wdr45/memoire.bib")
         citar-notes-paths '("~/org/recherche/wdr45/notes/")
         )
  )
#+end_src
Shortcut to export to pdf via latex asynchronously (SPC m é)
#+begin_src emacs-lisp
(defun +org/latex-to-pdf()
  (interactive)
  (org-latex-export-to-pdf)
  (let* ((f (buffer-file-name))
        (f2 (concat (file-name-sans-extension f) ".pdf")))
    (copy-file f2 "/mnt/c/Users/alexi/" "yes")))

(map! :map org-mode-map
        :localleader
        "é"      #'+org/latex-to-pdf)
#+end_src
* Dired
Hide information by default
#+begin_src emacs-lisp
(use-package! dired
  :hook (dired-mode . dired-hide-details-mode))
#+end_src
* Mail
Jump to inbox directly
#+begin_src emacs-lisp
(after! notmuch
  (setq +notmuch-home-function (lambda () (notmuch-search "tag:inbox"))))
#+end_src
#+begin_src emacs-lisp
(defun get-bibtex-from-doi (doi)
 "Get a BibTeX entry from the DOI"
 (interactive "MDOI: ")
 (let ((url-mime-accept-string "text/bibliography;style=bibtex"))
   (with-current-buffer
     (url-retrieve-synchronously
       (format "http://dx.doi.org/%s"
       	(replace-regexp-in-string "http://dx.doi.org/" "" doi)))
     (switch-to-buffer (current-buffer))
     (goto-char (point-max))
     (setq bibtex-entry
     	  (buffer-substring
          	(string-match "@" (buffer-string))
              (point)))
     (kill-buffer (current-buffer))))
 (insert (decode-coding-string bibtex-entry 'utf-8))
 (bibtex-fill-entry))
#+end_src

* Hledger

#+begin_src emacs-lisp
 (after! ledger
   (setq ledger-binary-path "hledger"))
#+end_src
